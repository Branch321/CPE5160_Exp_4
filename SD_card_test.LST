C51 COMPILER V6.02  SD_CARD_TEST                                                           11/17/2019 14:04:17 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE SD_CARD_TEST
OBJECT MODULE PLACED IN .\SD_card_test.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\SD_card_test.c DEBUG OBJECTEXTEND

stmt level    source

   1          #include "AT89C51RC2.h"
   2          #include "stdio.h"
   3          #include "main.h"
   4          #include "PORT.H"
   5          #include "UART.h"
   6          #include "print_bytes.h"
   7          #include "SPI.h"
   8          #include "SDcard.h"
   9          #include "Long_Serial_In.h"
  10          //#include "memory_test.h"
  11          #include "LCD_routines.h"
  12          #include "Timer0_hardware_delay_1ms.h"
  13          #include "Outputs.h"
  14          #include "LED_Control.h"
  15          #include "Directory_Functions_struct.h"
  16          #include "Read_Sector.h"
  17          #include <stdio.h>
  18          
  19          uint8_t code SD_start[]="SD Card Init...";
  20          uint8_t code SDSC[]="Std. Capacity";
  21          uint8_t code SDHC[]="High Capacity";
  22          
  23          xdata uint8_t buf1[512];
  24          xdata uint8_t buf2[512];
  25          
  26          
  27          main()
  28          {
  29   1         uint32_t block_num, LBA;
  30   1         uint16_t i;
  31   1         uint8_t error_flag;
  32   1         uint8_t SD_stat;
  33   1         uint32_t cluster_num;
  34   1         uint32_t current_directory_sector;
  35   1         FS_values_t * Mounted_Drive_values = Export_Drive_values();
  36   1        
  37   1         AUXR=0x0c;   // make all of XRAM available, ALE always on
  38   1         if(OSC_PER_INST==6)  // sets the x2 bit according to the OSC_PER_INST value
  39   1         {
  40   2             CKCON0=0x01;  // set X2 clock mode
  41   2         }
  42   1         else if(OSC_PER_INST==12)
  43   1         {
  44   2             CKCON0=0x00;  // set standard clock mode
  45   2         }
  46   1         
  47   1         P2_set_bit(0x0F);  // sets lower four bits of port 2 for switch inputs.
  48   1         LEDS_OFF(Amber_LED|Yellow_LED|Green_LED);
  49   1         LEDS_ON(Red_LED);
  50   1         i=0;
  51   1         while(i<=60000) i++;
  52   1         LEDS_OFF(Red_LED);
  53   1         uart_init(9600);
  54   1         LCD_Init();
  55   1           
C51 COMPILER V6.02  SD_CARD_TEST                                                           11/17/2019 14:04:17 PAGE 2   

  56   1      
  57   1         printf("SD Card Test Program\n\r\n\n");
  58   1         LCD_Print(line1,0,SD_start);   
  59   1         error_flag=SPI_Master_Init(400000UL);
  60   1         if(error_flag!=no_errors)
  61   1         {
  62   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  63   2      	  UART_Transmit('S');
  64   2            while(1);
  65   2         }
  66   1         LEDS_ON(Amber_LED);
  67   1         // SD Card Initialization
  68   1         error_flag=SD_card_init();
  69   1         if(error_flag!=no_errors)
  70   1         {
  71   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  72   2      	  UART_Transmit('C');
  73   2            while(1);
  74   2         }
  75   1         LEDS_OFF(Amber_LED);
  76   1         error_flag=SPI_Master_Init(400000UL);
  77   1         if(error_flag!=no_errors)
  78   1         {
  79   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  80   2      	  UART_Transmit('P');
  81   2            while(1);
  82   2         }
  83   1         for(i=0;i<512;i++)
  84   1         {
  85   2            buf1[i]=0xff;  // erase valout for debug
  86   2      //      buf2[i]=0xff;
  87   2         }
  88   1         SD_stat=Return_SD_Card_Type();
  89   1         if(SD_stat==Standard_Capacity)
  90   1         {
  91   2            LCD_Print(line2,0,SDSC);
  92   2         }
  93   1         else if(SD_stat==High_Capacity)
  94   1         {
  95   2            LCD_Print(line2,0,SDHC);
  96   2         }
  97   1      // Main Loop
  98   1         error_flag = Mount_Drive(buf1);
  99   1         current_directory_sector = Mounted_Drive_values->FirstRootDirSec;
 100   1         //Print_Directory(current_directory_sector, buf1);
 101   1         while(1)
 102   1         {
 103   2            Print_Directory(current_directory_sector, buf1);
 104   2            printf("Input Entry #: ");
 105   2            block_num=long_serial_input(); //block_num is entry number for Read_Dir_Entry()
 106   2            //LBA=block_num<<SD_stat;
 107   2      	  LEDS_ON(Green_LED);
 108   2      	  // TODO: Need to error check if number of entries (LBA or block_num)is higher that directories
 109   2      	  cluster_num = Read_Dir_Entry(current_directory_sector, block_num, buf1);
 110   2      	  //printf("%lx\r\n", cluster_num);
 111   2      	  // TODO: Need to do extra error checking
 112   2      	  if((cluster_num&directory_bit)!=0) // directory mask
 113   2      	  {
 114   3      	  	  printf("Entry is a directory...Opening now...\r\n");
 115   3      	      cluster_num&=0x0FFFFFFF;
 116   3                current_directory_sector = First_Sector(cluster_num);
 117   3      	  }
C51 COMPILER V6.02  SD_CARD_TEST                                                           11/17/2019 14:04:17 PAGE 3   

 118   2      	  else // if entry is a file
 119   2      	  {
 120   3      	  	  printf("Entry is a file...Opening now...\r\n");
 121   3      	  	  cluster_num&=0x0FFFFFFF;
 122   3      	      Open_File(cluster_num, buf2);
 123   3      	  }
 124   2      	  /*
 125   2            if(error_flag!=no_errors)
 126   2            {
 127   2               LEDS_ON(Red_LED);  // An error causes the program to stop
 128   2               while(1);
 129   2            }
 130   2      
 131   2      	  LEDS_OFF(Green_LED);
 132   2            if(error_flag!=no_errors)
 133   2            {
 134   2               LEDS_ON(Red_LED);  // An error causes the program to stop
 135   2               while(1);
 136   2            }
 137   2      	  */
 138   2         }
 139   1      } 
*** WARNING C280 IN LINE 29 OF .\SD_CARD_TEST.C: 'LBA': unreferenced local variable
 140          
 141          
 142          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    482    ----
   CONSTANT SIZE    =    160    ----
   XDATA SIZE       =   1024    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
