C51 COMPILER V6.02  SD_CARD_TEST                                                           11/18/2019 20:09:33 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE SD_CARD_TEST
OBJECT MODULE PLACED IN .\SD_card_test.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\SD_card_test.c DEBUG OBJECTEXTEND

stmt level    source

   1          #include "AT89C51RC2.h"
   2          #include "stdio.h"
   3          #include "main.h"
   4          #include "PORT.H"
   5          #include "UART.h"
   6          #include "print_bytes.h"
   7          #include "SPI.h"
   8          #include "SDcard.h"
   9          #include "Long_Serial_In.h"
  10          #include "LCD_routines.h"
  11          #include "Timer0_hardware_delay_1ms.h"
  12          #include "Outputs.h"
  13          #include "LED_Control.h"
  14          #include "Directory_Functions_struct.h"
  15          #include "Read_Sector.h"
  16          #include <stdio.h>
  17          
  18          uint8_t code SD_start[]="SD Card Init...";
  19          uint8_t code SDSC[]="Std. Capacity";
  20          uint8_t code SDHC[]="High Capacity";
  21          
  22          xdata uint8_t buf1[512];
  23          xdata uint8_t buf2[512];
  24          
  25          main()
  26          {
  27   1         uint32_t block_num;
  28   1         uint16_t i;
  29   1         uint8_t error_flag;
  30   1         uint8_t SD_stat;
  31   1         uint32_t cluster_num;
  32   1         uint32_t current_directory_sector;
  33   1         uint32_t num_entries;
  34   1         FS_values_t * Mounted_Drive_values = Export_Drive_values();
  35   1         //printf("Is this working?!?!?!");
  36   1         AUXR=0x0c;   // make all of XRAM available, ALE always on
  37   1         if(OSC_PER_INST==6)  // sets the x2 bit according to the OSC_PER_INST value
  38   1         {
  39   2             CKCON0=0x01;  // set X2 clock mode
  40   2         }
  41   1         else if(OSC_PER_INST==12)
  42   1         {
  43   2             CKCON0=0x00;  // set standard clock mode
  44   2         }
  45   1         
  46   1         P2_set_bit(0x0F);  // sets lower four bits of port 2 for switch inputs.
  47   1         LEDS_OFF(Amber_LED|Yellow_LED|Green_LED);
  48   1         LEDS_ON(Red_LED);
  49   1         i=0;
  50   1         while(i<=60000) i++;
  51   1         LEDS_OFF(Red_LED);
  52   1         uart_init(9600);
  53   1         LCD_Init();
  54   1      
  55   1         printf("SD Card Test Program\n\r\n\n");
C51 COMPILER V6.02  SD_CARD_TEST                                                           11/18/2019 20:09:33 PAGE 2   

  56   1         LCD_Print(line1,0,SD_start);   
  57   1         error_flag=SPI_Master_Init(400000UL);
  58   1         if(error_flag!=no_errors)
  59   1         {
  60   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  61   2      	  UART_Transmit('S');
  62   2            while(1);
  63   2         }
  64   1         LEDS_ON(Amber_LED);
  65   1         // SD Card Initialization
  66   1         error_flag=SD_card_init();
  67   1         if(error_flag!=no_errors)
  68   1         {
  69   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  70   2      	  UART_Transmit('C');
  71   2            while(1);
  72   2         }
  73   1         LEDS_OFF(Amber_LED);
  74   1         error_flag=SPI_Master_Init(400000UL);
  75   1         if(error_flag!=no_errors)
  76   1         {
  77   2            LEDS_ON(Red_LED);  // An error causes the program to stop
  78   2      	  UART_Transmit('P');
  79   2            while(1);
  80   2         }
  81   1         for(i=0;i<512;i++)
  82   1         {
  83   2            buf1[i]=0xff;  // erase valout for debug
  84   2      //      buf2[i]=0xff;
  85   2         }
  86   1         SD_stat=Return_SD_Card_Type();
  87   1         if(SD_stat==Standard_Capacity)
  88   1         {
  89   2            LCD_Print(line2,0,SDSC);
  90   2         }
  91   1         else if(SD_stat==High_Capacity)
  92   1         {
  93   2            LCD_Print(line2,0,SDHC);
  94   2         }
  95   1      // Main Loop
  96   1         error_flag = Mount_Drive(buf1);
  97   1         current_directory_sector = Mounted_Drive_values->FirstRootDirSec;
  98   1         while(1)
  99   1         {
 100   2            num_entries = Print_Directory(current_directory_sector, buf1);
 101   2            printf("Input Entry #: ");
 102   2            block_num=long_serial_input(); //block_num is entry number for Read_Dir_Entry()
 103   2            while ((block_num <= 0) || (block_num > num_entries))
 104   2            {
 105   3               printf("Invalid selection. Please select a valid entry.");
 106   3               block_num = long_serial_input();
 107   3            }
 108   2      
 109   2      	  LEDS_ON(Green_LED);
 110   2      	  // TODO: Need to error check if number of entries (LBA or block_num)is higher that directories
 111   2      	  cluster_num = Read_Dir_Entry(current_directory_sector, block_num, buf1);
 112   2      	  // TODO: Need to do extra error checking and set directory bit to 1 if error
 113   2      	  if((cluster_num &directory_bit)!=0) // directory mask
 114   2      	  {
 115   3      	  	   printf("Entry is a directory...Opening now...\r\n");
 116   3      	      cluster_num &= 0x0FFFFFFF;
 117   3               current_directory_sector = First_Sector(cluster_num);
C51 COMPILER V6.02  SD_CARD_TEST                                                           11/18/2019 20:09:33 PAGE 3   

 118   3      	  }
 119   2      	  else // if entry is a file
 120   2      	  {
 121   3      	  	   printf("Entry is a file...Opening now...\r\n");
 122   3      	  	   cluster_num &= 0x0FFFFFFF;
 123   3      	      Open_File(cluster_num, buf2);
 124   3      	  }
 125   2         }
 126   1      } 
 127          
 128          
 129          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    548    ----
   CONSTANT SIZE    =    208    ----
   XDATA SIZE       =   1024    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
