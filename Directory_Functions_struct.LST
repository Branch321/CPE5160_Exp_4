C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             11/11/2019 16:09:15 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE DIRECTORY_FUNCTIONS_STRUCT
OBJECT MODULE PLACED IN .\Directory_Functions_struct.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\Directory_Functions_struct.c DEBUG OBJECTEXTEND

stmt level    source

   1          #include "AT89C51RC2.h"
   2          #include <stdio.h>
   3          #include "main.h"
   4          #include "PORT.H"
   5          #include "UART.h"
   6          #include "SPI.h"
   7          #include "SDCard.h"
   8          #include "File_System.h"
   9          #include "print_bytes.h"
  10          #include "Directory_Functions_struct.h"
  11          #include "Read_Sector.h"
  12          
  13          
  14          FS_values_t idata Drive_values;
  15          
  16          /***********************************************************************
  17          DESC: Returns a pointer to the global structure Drive_values to export to other files
  18          INPUT: void
  19          RETURNS: Pointer to the structure Drive_values
  20          CAUTION: 
  21          ************************************************************************/
  22          
  23          FS_values_t * Export_Drive_values(void)
  24          {
  25   1         return &Drive_values;
  26   1      }
  27          
  28          
  29          /***********************************************************************
  30          DESC: Prints all short file name entries for a given directory 
  31          INPUT: Starting Sector of the directory and the pointer to a 
  32          block of memory in xdata that can be used to read blocks from the SD card
  33          RETURNS: uint16_t number of entries found in the directory
  34          CAUTION: Supports FAT16, SD_shift must be set before using this function
  35          ************************************************************************/
  36          
  37          
  38          /*
  39          uint16_t  Print_Directory(uint32_t Sector_num, uint8_t xdata * array_in)
  40          { 
  41             uint32_t Sector, max_sectors;
  42             uint16_t i, entries;
  43             uint8_t temp8, j, attr, out_val, error_flag;
  44             uint8_t * values;
  45          
  46          
  47             values=array_in;
  48             entries=0;
  49             i=0;
  50             if (Drive_values.FATtype==FAT16)  // included for FAT16 compatibility
  51             { 
  52                max_sectors=Drive_values.RootDirSecs;   // maximum sectors in a FAT16 root directory
  53             }
  54             else
  55             {
C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             11/11/2019 16:09:15 PAGE 2   

  56                max_sectors=Drive_values.SecPerClus;
  57             }
  58             Sector=Sector_num;
  59             error_flag=Read_Sector(Sector,Drive_values.BytesPerSec,values);
  60             if(error_flag==no_errors)
  61             {
  62               do
  63               {
  64                  temp8=read8(0+i,values);  // read first byte to see if empty
  65                  if((temp8!=0xE5)&&(temp8!=0x00))
  66          	    {  
  67          	       attr=read8(0x0b+i,values);
  68          		   if((attr&0x0E)==0)   // if hidden, system or Vol_ID bit is set do not print
  69          		   {
  70          		      entries++;
  71          			  printf("%5d. ",entries);  // print entry number with a fixed width specifier
  72          		      for(j=0;j<8;j++)
  73          			  {
  74          			     out_val=read8(i+j,values);   // print the 8 byte name
  75          			     putchar(out_val);
  76          			  }
  77                        if((attr&0x10)==0x10)  // indicates directory
  78          			  {
  79          			     for(j=8;j<11;j++)
  80          			     {
  81          			        out_val=read8(i+j,values);
  82          			        putchar(out_val);
  83          			     }
  84          			     printf("[DIR]\n");
  85          			  }
  86          			  else       // print a period and the three byte extension for a file
  87          			  {
  88          			     putchar(0x2E);       
  89          			     for(j=8;j<11;j++)
  90          			     {
  91          			        out_val=read8(i+j,values);
  92          			        putchar(out_val);
  93          			     }
  94          			     putchar(0x0d);
  95                           putchar(0x0a);
  96          			  }
  97          		    }
  98          		}
  99          		    i=i+32;  // next entry
 100          		    if(i>510)
 101          		    {
 102          			  Sector++;
 103                        if((Sector-Sector_num)<max_sectors)
 104          			  {
 105                           error_flag=Read_Sector(Sector,Drive_values.BytesPerSec,values);
 106          			     if(error_flag!=no_errors)
 107          			     {
 108          			        entries=0;   // no entries found indicates disk read error
 109          				    temp8=0;     // forces a function exit
 110          			     }
 111                           i=0;
 112          			  }
 113          			  else
 114          			  {
 115          			     entries=entries|more_entries;  // set msb to indicate more entries in another cluster
 116          			     temp8=0;                       // forces a function exit
 117          			  }
C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             11/11/2019 16:09:15 PAGE 3   

 118          		    }
 119                   
 120          	  }while(temp8!=0);
 121          	}
 122          	else
 123          	{
 124          	   entries=0;    // no entries found indicates disk read error
 125          	}
 126             return entries;
 127           }
 128          
 129          */
 130          /***********************************************************************
 131          DESC: Uses the same method as Print_Directory to locate short file names,
 132                but locates a specified entry and returns and cluster  
 133          INPUT: Starting Sector of the directory, an entry number and a pointer to a 
 134          block of memory in xdata that can be used to read blocks from the SD card
 135          RETURNS: uint32_t with cluster in lower 28 bits.  Bit 28 set if this is 
 136                   a directory entry, clear for a file.  Bit 31 set for error.
 137          CAUTION: 
 138          ************************************************************************/
 139          /*
 140          uint32_t Read_Dir_Entry(uint32_t Sector_num, uint16_t Entry, uint8_t xdata * array_in)
 141          { 
 142             uint32_t Sector, max_sectors, return_clus;
 143             uint16_t i, entries;
 144             uint8_t temp8, attr, error_flag;
 145             uint8_t * values;
 146          
 147             values=array_in;
 148             entries=0;
 149             i=0;
 150             return_clus=0;
 151             if (Drive_values.FATtype==FAT16)  // included for FAT16 compatibility
 152             { 
 153                max_sectors=Drive_values.RootDirSecs;   // maximum sectors in a FAT16 root directory
 154             }
 155             else
 156             {
 157                max_sectors=Drive_values.SecPerClus;
 158             }
 159             Sector=Sector_num;
 160             error_flag=Read_Sector(Sector,Drive_values.BytesPerSec,values);
 161             if(error_flag==no_errors)
 162             {
 163               do
 164               {
 165                  temp8=read8(0+i,values);  // read first byte to see if empty
 166                  if((temp8!=0xE5)&&(temp8!=0x00))
 167          	    {  
 168          	       attr=read8(0x0b+i,values);
 169          		   if((attr&0x0E)==0)    // if hidden do not print
 170          		   {
 171          		      entries++;
 172                        if(entries==Entry)
 173                        {
 174          			    if(Drive_values.FATtype==FAT32)
 175                          {
 176                             return_clus=read8(21+i,values);
 177          				   return_clus=return_clus<<8;
 178                             return_clus|=read8(20+i,values);
 179                             return_clus=return_clus<<8;
C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             11/11/2019 16:09:15 PAGE 4   

 180                          }
 181                          return_clus|=read8(27+i,values);
 182          			    return_clus=return_clus<<8;
 183                          return_clus|=read8(26+i,values);
 184          			    attr=read8(0x0b+i,values);
 185          			    if(attr&0x10) return_clus|=directory_bit;
 186                          temp8=0;    // forces a function exit
 187                        }
 188                        
 189          		    }
 190          		}
 191          		    i=i+32;  // next entry
 192          		    if(i>510)
 193          		    {
 194          			  Sector++;
 195          			  if((Sector-Sector_num)<max_sectors)
 196          			  {
 197                           error_flag=Read_Sector(Sector,Drive_values.BytesPerSec,values);
 198          			     if(error_flag!=no_errors)
 199          			     {
 200          			         return_clus=no_entry_found;
 201                               temp8=0; 
 202          			     }
 203          			     i=0;
 204          			  }
 205          			  else
 206          			  {
 207          			     temp8=0;                       // forces a function exit
 208          			  }
 209          		    }
 210                   
 211          	  }while(temp8!=0);
 212          	}
 213          	else
 214          	{
 215          	   return_clus=no_entry_found;
 216          	}
 217          	if(return_clus==0) return_clus=no_entry_found;
 218             return return_clus;
 219           }
 220          */
 221          uint8_t Mount_Drive(uint8_t xdata * array_name)
 222          {
 223   1      	uint8_t i;
 224   1      	uint8_t xdata temp_array[512];
 225   1      	uint8_t error_flag;
 226   1      	error_flag = Read_Sector(0, 512, temp_array);
 227   1      	if(error_flag!=0x00)
 228   1      	{
 229   2      		printf("Error has occured");
 230   2      	}
 231   1      	else
 232   1      	{
 233   2      		for(i = 0;i<512;i++)
 234   2      		{
 235   3      			//printf("%X",temp_array[i]);
 236   3      		}
 237   2      		printf("\r\n");
 238   2      	}
 239   1      	return error_flag;
 240   1      }
*** WARNING C280 IN LINE 221 OF .\DIRECTORY_FUNCTIONS_STRUCT.C: 'array_name': unreferenced local variable
C51 COMPILER V6.02  DIRECTORY_FUNCTIONS_STRUCT                                             11/11/2019 16:09:15 PAGE 5   

 241          
 242          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     79    ----
   CONSTANT SIZE    =     21    ----
   XDATA SIZE       =   ----     512
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =     22    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
